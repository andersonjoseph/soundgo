// Code generated by ogen, DO NOT EDIT.

package api

import (
	"time"
)

type BearerAuth struct {
	Token string
}

// GetToken returns the value of Token.
func (s *BearerAuth) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *BearerAuth) SetToken(val string) {
	s.Token = val
}

type Conflict struct {
	Error string `json:"error"`
}

// GetError returns the value of Error.
func (s *Conflict) GetError() string {
	return s.Error
}

// SetError sets the value of Error.
func (s *Conflict) SetError(val string) {
	s.Error = val
}

func (*Conflict) updateUserRes() {}

type CreatePasswordResetBadRequest struct {
	Error string `json:"error"`
}

// GetError returns the value of Error.
func (s *CreatePasswordResetBadRequest) GetError() string {
	return s.Error
}

// SetError sets the value of Error.
func (s *CreatePasswordResetBadRequest) SetError(val string) {
	s.Error = val
}

func (*CreatePasswordResetBadRequest) createPasswordResetRes() {}

// CreatePasswordResetNoContent is response for CreatePasswordReset operation.
type CreatePasswordResetNoContent struct{}

func (*CreatePasswordResetNoContent) createPasswordResetRes() {}

type CreateUserBadRequest struct {
	Error string `json:"error"`
}

// GetError returns the value of Error.
func (s *CreateUserBadRequest) GetError() string {
	return s.Error
}

// SetError sets the value of Error.
func (s *CreateUserBadRequest) SetError(val string) {
	s.Error = val
}

func (*CreateUserBadRequest) createUserRes() {}

type CreateUserConflict struct {
	Error string `json:"error"`
}

// GetError returns the value of Error.
func (s *CreateUserConflict) GetError() string {
	return s.Error
}

// SetError sets the value of Error.
func (s *CreateUserConflict) SetError(val string) {
	s.Error = val
}

func (*CreateUserConflict) createUserRes() {}

// DeleteSessionNoContent is response for DeleteSession operation.
type DeleteSessionNoContent struct{}

func (*DeleteSessionNoContent) deleteSessionRes() {}

type Forbidden struct {
	Error string `json:"error"`
}

// GetError returns the value of Error.
func (s *Forbidden) GetError() string {
	return s.Error
}

// SetError sets the value of Error.
func (s *Forbidden) SetError(val string) {
	s.Error = val
}

func (*Forbidden) updateUserRes() {}

type NotFound struct {
	Error string `json:"error"`
}

// GetError returns the value of Error.
func (s *NotFound) GetError() string {
	return s.Error
}

// SetError sets the value of Error.
func (s *NotFound) SetError(val string) {
	s.Error = val
}

func (*NotFound) updateUserRes() {}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/password-reset-input
type PasswordResetInput struct {
	Code     string `json:"code"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

// GetCode returns the value of Code.
func (s *PasswordResetInput) GetCode() string {
	return s.Code
}

// GetEmail returns the value of Email.
func (s *PasswordResetInput) GetEmail() string {
	return s.Email
}

// GetPassword returns the value of Password.
func (s *PasswordResetInput) GetPassword() string {
	return s.Password
}

// SetCode sets the value of Code.
func (s *PasswordResetInput) SetCode(val string) {
	s.Code = val
}

// SetEmail sets the value of Email.
func (s *PasswordResetInput) SetEmail(val string) {
	s.Email = val
}

// SetPassword sets the value of Password.
func (s *PasswordResetInput) SetPassword(val string) {
	s.Password = val
}

// Ref: #/components/schemas/password-reset-request-input
type PasswordResetRequestInput struct {
	Email string `json:"email"`
}

// GetEmail returns the value of Email.
func (s *PasswordResetRequestInput) GetEmail() string {
	return s.Email
}

// SetEmail sets the value of Email.
func (s *PasswordResetRequestInput) SetEmail(val string) {
	s.Email = val
}

type ResetPasswordBadRequest struct {
	Error string `json:"error"`
}

// GetError returns the value of Error.
func (s *ResetPasswordBadRequest) GetError() string {
	return s.Error
}

// SetError sets the value of Error.
func (s *ResetPasswordBadRequest) SetError(val string) {
	s.Error = val
}

func (*ResetPasswordBadRequest) resetPasswordRes() {}

// ResetPasswordNoContent is response for ResetPassword operation.
type ResetPasswordNoContent struct{}

func (*ResetPasswordNoContent) resetPasswordRes() {}

// Ref: #/components/schemas/session
type Session struct {
	Token OptString `json:"token"`
}

// GetToken returns the value of Token.
func (s *Session) GetToken() OptString {
	return s.Token
}

// SetToken sets the value of Token.
func (s *Session) SetToken(val OptString) {
	s.Token = val
}

func (*Session) createSessionRes() {}

// Ref: #/components/schemas/session-input
type SessionInput struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

// GetUsername returns the value of Username.
func (s *SessionInput) GetUsername() string {
	return s.Username
}

// GetPassword returns the value of Password.
func (s *SessionInput) GetPassword() string {
	return s.Password
}

// SetUsername sets the value of Username.
func (s *SessionInput) SetUsername(val string) {
	s.Username = val
}

// SetPassword sets the value of Password.
func (s *SessionInput) SetPassword(val string) {
	s.Password = val
}

type Unauthorized struct {
	Error string `json:"error"`
}

// GetError returns the value of Error.
func (s *Unauthorized) GetError() string {
	return s.Error
}

// SetError sets the value of Error.
func (s *Unauthorized) SetError(val string) {
	s.Error = val
}

func (*Unauthorized) createSessionRes() {}
func (*Unauthorized) deleteSessionRes() {}
func (*Unauthorized) updateUserRes()    {}

type UpdateUserBadRequest struct {
	Error string `json:"error"`
}

// GetError returns the value of Error.
func (s *UpdateUserBadRequest) GetError() string {
	return s.Error
}

// SetError sets the value of Error.
func (s *UpdateUserBadRequest) SetError(val string) {
	s.Error = val
}

func (*UpdateUserBadRequest) updateUserRes() {}

// Ref: #/components/schemas/update-user-input
type UpdateUserInput struct {
	Username string `json:"username"`
}

// GetUsername returns the value of Username.
func (s *UpdateUserInput) GetUsername() string {
	return s.Username
}

// SetUsername sets the value of Username.
func (s *UpdateUserInput) SetUsername(val string) {
	s.Username = val
}

// Ref: #/components/schemas/user
type User struct {
	ID        OptString   `json:"id"`
	Username  OptString   `json:"username"`
	Email     OptString   `json:"email"`
	CreatedAt OptDateTime `json:"createdAt"`
}

// GetID returns the value of ID.
func (s *User) GetID() OptString {
	return s.ID
}

// GetUsername returns the value of Username.
func (s *User) GetUsername() OptString {
	return s.Username
}

// GetEmail returns the value of Email.
func (s *User) GetEmail() OptString {
	return s.Email
}

// GetCreatedAt returns the value of CreatedAt.
func (s *User) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// SetID sets the value of ID.
func (s *User) SetID(val OptString) {
	s.ID = val
}

// SetUsername sets the value of Username.
func (s *User) SetUsername(val OptString) {
	s.Username = val
}

// SetEmail sets the value of Email.
func (s *User) SetEmail(val OptString) {
	s.Email = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *User) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

func (*User) createUserRes() {}
func (*User) updateUserRes() {}

// Ref: #/components/schemas/user-input
type UserInput struct {
	Username string `json:"username"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

// GetUsername returns the value of Username.
func (s *UserInput) GetUsername() string {
	return s.Username
}

// GetEmail returns the value of Email.
func (s *UserInput) GetEmail() string {
	return s.Email
}

// GetPassword returns the value of Password.
func (s *UserInput) GetPassword() string {
	return s.Password
}

// SetUsername sets the value of Username.
func (s *UserInput) SetUsername(val string) {
	s.Username = val
}

// SetEmail sets the value of Email.
func (s *UserInput) SetEmail(val string) {
	s.Email = val
}

// SetPassword sets the value of Password.
func (s *UserInput) SetPassword(val string) {
	s.Password = val
}
